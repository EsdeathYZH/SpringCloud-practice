2018-07-01 23:59:42 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStartupProfileInfo][593]-> No active profile set, falling back to default profiles: default
2018-07-01 23:59:42 [INFO][org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@71812481: startup date [Sun Jul 01 23:59:42 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@4ec4f3a0
2018-07-01 23:59:44 [INFO][org.springframework.cloud.context.scope.GenericScope][setSerializationId][263]-> BeanFactory id=3e7ee3f6-8cbe-3942-86e0-e238aba95a20
2018-07-01 23:59:44 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-01 23:59:44 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$49ba97c5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-01 23:59:44 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$33a7f481] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-01 23:59:45 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][initialize][92]-> Tomcat initialized with port(s): 1003 (http)
2018-07-01 23:59:45 [INFO][org.apache.catalina.core.StandardService][log][180]-> Starting service [Tomcat]
2018-07-01 23:59:45 [INFO][org.apache.catalina.core.StandardEngine][log][180]-> Starting Servlet Engine: Apache Tomcat/8.5.31
2018-07-01 23:59:45 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring embedded WebApplicationContext
2018-07-01 23:59:45 [INFO][org.springframework.web.context.ContextLoader][prepareEmbeddedWebApplicationContext][276]-> Root WebApplicationContext: initialization completed in 2705 ms
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.ServletRegistrationBean][onStartup][190]-> Mapping servlet: 'dispatcherServlet' to [/]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'metricsFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'characterEncodingFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'requestContextFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'webRequestLoggingFilter' to: [/*]
2018-07-01 23:59:45 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'applicationContextIdFilter' to: [/*]
2018-07-01 23:59:47 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-01 23:59:47 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-01 23:59:47 [INFO][com.netflix.config.DynamicPropertyFactory][getInstance][281]-> DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@117d32e
2018-07-01 23:59:47 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter][initControllerAdviceCache][534]-> Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@71812481: startup date [Sun Jul 01 23:59:42 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@4ec4f3a0
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/consumer],methods=[GET]}" onto public java.lang.String com.esdeath.serviceconsumer.ConsumeController.info()
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-01 23:59:48 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/logfile || /logfile.json],methods=[GET || HEAD]}" onto public void org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2018-07-01 23:59:49 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-01 23:59:49 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-01 23:59:49 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][afterSingletonsInstantiated][431]-> Registering beans for JMX exposure on startup
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'environmentManager' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'restartEndpoint' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshScope' has been autodetected for JMX exposure
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=71812481,type=ConfigurationPropertiesRebinder]
2018-07-01 23:59:49 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2018-07-01 23:59:50 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 0
2018-07-01 23:59:50 [INFO][org.springframework.cloud.netflix.eureka.InstanceInfoFactory][create][70]-> Setting initial instance status as: STARTING
2018-07-01 23:59:50 [INFO][com.netflix.discovery.DiscoveryClient][<init>][344]-> Initializing Eureka in region us-east-1
2018-07-01 23:59:50 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][70]-> Using JSON encoding codec LegacyJacksonJson
2018-07-01 23:59:50 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][71]-> Using JSON decoding codec LegacyJacksonJson
2018-07-01 23:59:50 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][80]-> Using XML encoding codec XStreamXml
2018-07-01 23:59:50 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][81]-> Using XML decoding codec XStreamXml
2018-07-01 23:59:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][920]-> Disable delta property : false
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][921]-> Single vip registry refresh property : null
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][922]-> Force full registry fetch : false
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][923]-> Application is null : false
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][924]-> Registered Applications size is zero : true
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][926]-> Application version is -1: true
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1009]-> Getting all instance registry info from the eureka server
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1018]-> The response status is 200
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][initScheduledTasks][1244]-> Starting heartbeat executor: renew interval is: 30
2018-07-01 23:59:51 [INFO][com.netflix.discovery.InstanceInfoReplicator][<init>][59]-> InstanceInfoReplicator onDemand update allowed rate per min is 4
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][<init>][425]-> Discovery Client initialized at timestamp 1530460791592 with initial instances count: 1
2018-07-01 23:59:51 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry][register][40]-> Registering application service-consumer with eureka with status UP
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][notify][1279]-> Saw local status change event StatusChangeEvent [timestamp=1530460791623, current=UP, previous=STARTING]
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][register][795]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003: registering service...
2018-07-01 23:59:51 [INFO][com.netflix.discovery.DiscoveryClient][register][804]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003 - registration status: 204
2018-07-01 23:59:51 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 2147483647
2018-07-01 23:59:51 [INFO][org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration][start][138]-> Starting poller
2018-07-01 23:59:51 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][start][216]-> Tomcat started on port(s): 1003 (http)
2018-07-01 23:59:51 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration][onApplicationEvent][117]-> Updating port to 1003
2018-07-01 23:59:51 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStarted][57]-> Started ServiceConsumerApplication in 12.935 seconds (JVM running for 14.987)
2018-07-02 00:00:25 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-07-02 00:00:25 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][489]-> FrameworkServlet 'dispatcherServlet': initialization started
2018-07-02 00:00:25 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][508]-> FrameworkServlet 'dispatcherServlet': initialization completed in 25 ms
2018-07-02 00:00:26 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:00:26 [INFO][org.springframework.context.annotation.AnnotationConfigApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2ac47e46: startup date [Mon Jul 02 00:00:26 GMT+08:00 2018]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@71812481
2018-07-02 00:00:26 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-02 00:00:26 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:00:26 [INFO][com.netflix.util.concurrent.ShutdownEnabledTimer][<init>][58]-> Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-client
2018-07-02 00:00:27 [INFO][com.netflix.loadbalancer.BaseLoadBalancer][initWithConfig][192]-> Client: eureka-client instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2018-07-02 00:00:27 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][enableAndInitLearnNewServersFeature][214]-> Using serverListUpdater PollingServerListUpdater
2018-07-02 00:00:27 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:00:27 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][restOfInit][150]-> DynamicServerListLoadBalancer for client eureka-client initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[LAPTOP-MOM0E0E6:1002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:LAPTOP-MOM0E0E6:1002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@72677378
2018-07-02 00:00:28 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:01:18 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:04:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:09:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:14:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:19:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:24:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:29:48 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:29:50 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:29:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:31:00 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:31:17 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:32:15 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:34:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:39:51 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:43:46 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStartupProfileInfo][593]-> No active profile set, falling back to default profiles: default
2018-07-02 00:43:46 [INFO][org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689: startup date [Mon Jul 02 00:43:46 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1bb5a082
2018-07-02 00:43:48 [INFO][org.springframework.cloud.context.scope.GenericScope][setSerializationId][263]-> BeanFactory id=5ba6d282-a9cd-32dc-b08b-4daf1cb6abdb
2018-07-02 00:43:48 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$DefaultAsyncConfigurerSupport' of type [org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$DefaultAsyncConfigurerSupport$$EnhancerBySpringCGLIB$$49ece5d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.annotation.SleuthAnnotationAutoConfiguration' of type [org.springframework.cloud.sleuth.annotation.SleuthAnnotationAutoConfiguration$$EnhancerBySpringCGLIB$$f108e3f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'sleuthAdvisorConfig' of type [org.springframework.cloud.sleuth.annotation.SleuthAdvisorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$3ed7ee4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$28c54b0a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:48 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration' of type [org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$$EnhancerBySpringCGLIB$$f48ef42c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:43:49 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][initialize][92]-> Tomcat initialized with port(s): 1003 (http)
2018-07-02 00:43:49 [INFO][org.apache.catalina.core.StandardService][log][180]-> Starting service [Tomcat]
2018-07-02 00:43:49 [INFO][org.apache.catalina.core.StandardEngine][log][180]-> Starting Servlet Engine: Apache Tomcat/8.5.31
2018-07-02 00:43:50 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring embedded WebApplicationContext
2018-07-02 00:43:50 [INFO][org.springframework.web.context.ContextLoader][prepareEmbeddedWebApplicationContext][276]-> Root WebApplicationContext: initialization completed in 4435 ms
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'metricsFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'characterEncodingFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'traceFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'requestContextFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'webRequestLoggingFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'applicationContextIdFilter' to: [/*]
2018-07-02 00:43:52 [INFO][org.springframework.boot.web.servlet.ServletRegistrationBean][onStartup][190]-> Mapping servlet: 'dispatcherServlet' to [/]
2018-07-02 00:43:53 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-02 00:43:53 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-02 00:43:53 [INFO][com.netflix.config.DynamicPropertyFactory][getInstance][281]-> DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@279dd959
2018-07-02 00:43:54 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter][initControllerAdviceCache][534]-> Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689: startup date [Mon Jul 02 00:43:46 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1bb5a082
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/consumer],methods=[GET]}" onto public java.lang.String com.esdeath.serviceconsumer.ConsumeController.info()
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:43:55 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/logfile || /logfile.json],methods=[GET || HEAD]}" onto public void org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2018-07-02 00:43:58 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2018-07-02 00:43:59 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-02 00:43:59 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-02 00:43:59 [INFO][org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler][initialize][165]-> Initializing ExecutorService 
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][afterSingletonsInstantiated][431]-> Registering beans for JMX exposure on startup
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'environmentManager' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'restartEndpoint' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshScope' has been autodetected for JMX exposure
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=1a760689,type=ConfigurationPropertiesRebinder]
2018-07-02 00:44:00 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2018-07-02 00:44:02 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 0
2018-07-02 00:44:02 [INFO][org.springframework.cloud.netflix.eureka.InstanceInfoFactory][create][70]-> Setting initial instance status as: STARTING
2018-07-02 00:44:02 [INFO][com.netflix.discovery.DiscoveryClient][<init>][344]-> Initializing Eureka in region us-east-1
2018-07-02 00:44:03 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][70]-> Using JSON encoding codec LegacyJacksonJson
2018-07-02 00:44:03 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][71]-> Using JSON decoding codec LegacyJacksonJson
2018-07-02 00:44:03 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][80]-> Using XML encoding codec XStreamXml
2018-07-02 00:44:03 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][81]-> Using XML decoding codec XStreamXml
2018-07-02 00:44:04 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][920]-> Disable delta property : false
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][921]-> Single vip registry refresh property : null
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][922]-> Force full registry fetch : false
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][923]-> Application is null : false
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][924]-> Registered Applications size is zero : true
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][926]-> Application version is -1: true
2018-07-02 00:44:05 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1009]-> Getting all instance registry info from the eureka server
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1018]-> The response status is 200
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][initScheduledTasks][1244]-> Starting heartbeat executor: renew interval is: 30
2018-07-02 00:44:06 [INFO][com.netflix.discovery.InstanceInfoReplicator][<init>][59]-> InstanceInfoReplicator onDemand update allowed rate per min is 4
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][<init>][425]-> Discovery Client initialized at timestamp 1530463446380 with initial instances count: 3
2018-07-02 00:44:06 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry][register][40]-> Registering application service-consumer with eureka with status UP
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][notify][1279]-> Saw local status change event StatusChangeEvent [timestamp=1530463446477, current=UP, previous=STARTING]
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][register][795]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003: registering service...
2018-07-02 00:44:06 [INFO][com.netflix.discovery.DiscoveryClient][register][804]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003 - registration status: 204
2018-07-02 00:44:06 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 2147483647
2018-07-02 00:44:06 [INFO][org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration][start][138]-> Starting poller
2018-07-02 00:44:06 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][start][216]-> Tomcat started on port(s): 1003 (http)
2018-07-02 00:44:06 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration][onApplicationEvent][117]-> Updating port to 1003
2018-07-02 00:44:06 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStarted][57]-> Started ServiceConsumerApplication in 25.418 seconds (JVM running for 28.165)
2018-07-02 00:44:51 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-07-02 00:44:51 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][489]-> FrameworkServlet 'dispatcherServlet': initialization started
2018-07-02 00:44:51 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][508]-> FrameworkServlet 'dispatcherServlet': initialization completed in 39 ms
2018-07-02 00:44:52 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:44:52 [INFO][org.springframework.context.annotation.AnnotationConfigApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@674ef5f: startup date [Mon Jul 02 00:44:52 GMT+08:00 2018]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689
2018-07-02 00:44:52 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-02 00:44:52 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:44:52 [INFO][com.netflix.util.concurrent.ShutdownEnabledTimer][<init>][58]-> Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-client
2018-07-02 00:44:52 [INFO][com.netflix.loadbalancer.BaseLoadBalancer][initWithConfig][192]-> Client: eureka-client instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2018-07-02 00:44:52 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][enableAndInitLearnNewServersFeature][214]-> Using serverListUpdater PollingServerListUpdater
2018-07-02 00:44:52 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:44:52 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][restOfInit][150]-> DynamicServerListLoadBalancer for client eureka-client initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[LAPTOP-MOM0E0E6:1002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:LAPTOP-MOM0E0E6:1002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@13245eb1
2018-07-02 00:44:53 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:45:24 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:46:23 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStartupProfileInfo][593]-> No active profile set, falling back to default profiles: default
2018-07-02 00:46:23 [INFO][org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689: startup date [Mon Jul 02 00:46:23 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1bb5a082
2018-07-02 00:46:25 [INFO][org.springframework.cloud.context.scope.GenericScope][setSerializationId][263]-> BeanFactory id=5ba6d282-a9cd-32dc-b08b-4daf1cb6abdb
2018-07-02 00:46:25 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-02 00:46:25 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$DefaultAsyncConfigurerSupport' of type [org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$DefaultAsyncConfigurerSupport$$EnhancerBySpringCGLIB$$49ece5d0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:26 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.annotation.SleuthAnnotationAutoConfiguration' of type [org.springframework.cloud.sleuth.annotation.SleuthAnnotationAutoConfiguration$$EnhancerBySpringCGLIB$$f108e3f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:26 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'sleuthAdvisorConfig' of type [org.springframework.cloud.sleuth.annotation.SleuthAdvisorConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:26 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$3ed7ee4e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:26 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$28c54b0a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:26 [INFO][org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker][postProcessAfterInitialization][327]-> Bean 'org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration' of type [org.springframework.cloud.sleuth.instrument.async.AsyncDefaultAutoConfiguration$$EnhancerBySpringCGLIB$$f48ef42c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2018-07-02 00:46:28 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][initialize][92]-> Tomcat initialized with port(s): 1003 (http)
2018-07-02 00:46:28 [INFO][org.apache.catalina.core.StandardService][log][180]-> Starting service [Tomcat]
2018-07-02 00:46:28 [INFO][org.apache.catalina.core.StandardEngine][log][180]-> Starting Servlet Engine: Apache Tomcat/8.5.31
2018-07-02 00:46:28 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring embedded WebApplicationContext
2018-07-02 00:46:28 [INFO][org.springframework.web.context.ContextLoader][prepareEmbeddedWebApplicationContext][276]-> Root WebApplicationContext: initialization completed in 5394 ms
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'metricsFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'characterEncodingFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'traceFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'httpPutFormContentFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'requestContextFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'webRequestLoggingFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.FilterRegistrationBean][configure][258]-> Mapping filter: 'applicationContextIdFilter' to: [/*]
2018-07-02 00:46:30 [INFO][org.springframework.boot.web.servlet.ServletRegistrationBean][onStartup][190]-> Mapping servlet: 'dispatcherServlet' to [/]
2018-07-02 00:46:31 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-02 00:46:31 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-02 00:46:31 [INFO][com.netflix.config.DynamicPropertyFactory][getInstance][281]-> DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@36c281ed
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter][initControllerAdviceCache][534]-> Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689: startup date [Mon Jul 02 00:46:23 GMT+08:00 2018]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1bb5a082
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/consumer],methods=[GET]}" onto public java.lang.String com.esdeath.serviceconsumer.ConsumeController.info()
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping][register][543]-> Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:46:32 [INFO][org.springframework.web.servlet.handler.SimpleUrlHandlerMapping][registerHandler][362]-> Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/resume || /resume.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/logfile || /logfile.json],methods=[GET || HEAD]}" onto public void org.springframework.boot.actuate.endpoint.mvc.LogFileMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException,java.io.IOException
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/pause || /pause.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/restart || /restart.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.restart.RestartMvcEndpoint.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [INFO][org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping][register][543]-> Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2018-07-02 00:46:35 [WARN][com.netflix.config.sources.URLConfigurationSource][<init>][121]-> No URLs will be polled as dynamic configuration sources.
2018-07-02 00:46:35 [INFO][com.netflix.config.sources.URLConfigurationSource][<init>][122]-> To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2018-07-02 00:46:36 [INFO][org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler][initialize][165]-> Initializing ExecutorService 
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][afterSingletonsInstantiated][431]-> Registering beans for JMX exposure on startup
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'environmentManager' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'restartEndpoint' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][autodetect][918]-> Bean with name 'refreshScope' has been autodetected for JMX exposure
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'restartEndpoint': registering with JMX server as MBean [org.springframework.cloud.context.restart:name=restartEndpoint,type=RestartEndpoint]
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=1a760689,type=ConfigurationPropertiesRebinder]
2018-07-02 00:46:36 [INFO][org.springframework.jmx.export.annotation.AnnotationMBeanExporter][registerBeanInstance][679]-> Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2018-07-02 00:46:36 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 0
2018-07-02 00:46:37 [INFO][org.springframework.cloud.netflix.eureka.InstanceInfoFactory][create][70]-> Setting initial instance status as: STARTING
2018-07-02 00:46:37 [INFO][com.netflix.discovery.DiscoveryClient][<init>][344]-> Initializing Eureka in region us-east-1
2018-07-02 00:46:37 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][70]-> Using JSON encoding codec LegacyJacksonJson
2018-07-02 00:46:37 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][71]-> Using JSON decoding codec LegacyJacksonJson
2018-07-02 00:46:37 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][80]-> Using XML encoding codec XStreamXml
2018-07-02 00:46:37 [INFO][com.netflix.discovery.provider.DiscoveryJerseyProvider][<init>][81]-> Using XML decoding codec XStreamXml
2018-07-02 00:46:38 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][920]-> Disable delta property : false
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][921]-> Single vip registry refresh property : null
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][922]-> Force full registry fetch : false
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][923]-> Application is null : false
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][924]-> Registered Applications size is zero : true
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][fetchRegistry][926]-> Application version is -1: true
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1009]-> Getting all instance registry info from the eureka server
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][getAndStoreFullRegistry][1018]-> The response status is 200
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][initScheduledTasks][1244]-> Starting heartbeat executor: renew interval is: 30
2018-07-02 00:46:38 [INFO][com.netflix.discovery.InstanceInfoReplicator][<init>][59]-> InstanceInfoReplicator onDemand update allowed rate per min is 4
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][<init>][425]-> Discovery Client initialized at timestamp 1530463598853 with initial instances count: 4
2018-07-02 00:46:38 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry][register][40]-> Registering application service-consumer with eureka with status UP
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][notify][1279]-> Saw local status change event StatusChangeEvent [timestamp=1530463598911, current=UP, previous=STARTING]
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][register][795]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003: registering service...
2018-07-02 00:46:38 [INFO][com.netflix.discovery.DiscoveryClient][register][804]-> DiscoveryClient_SERVICE-CONSUMER/LAPTOP-MOM0E0E6:service-consumer:1003 - registration status: 204
2018-07-02 00:46:39 [INFO][org.springframework.context.support.DefaultLifecycleProcessor][start][341]-> Starting beans in phase 2147483647
2018-07-02 00:46:39 [INFO][org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration][start][138]-> Starting poller
2018-07-02 00:46:39 [INFO][org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer][start][216]-> Tomcat started on port(s): 1003 (http)
2018-07-02 00:46:39 [INFO][org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration][onApplicationEvent][117]-> Updating port to 1003
2018-07-02 00:46:39 [INFO][com.esdeath.serviceconsumer.ServiceConsumerApplication][logStarted][57]-> Started ServiceConsumerApplication in 22.728 seconds (JVM running for 27.13)
2018-07-02 00:48:43 [INFO][org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/]][log][180]-> Initializing Spring FrameworkServlet 'dispatcherServlet'
2018-07-02 00:48:43 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][489]-> FrameworkServlet 'dispatcherServlet': initialization started
2018-07-02 00:48:43 [INFO][org.springframework.web.servlet.DispatcherServlet][initServletBean][508]-> FrameworkServlet 'dispatcherServlet': initialization completed in 37 ms
2018-07-02 00:48:43 [INFO][com.esdeath.serviceconsumer.ConsumeController][info][25]-> 消费者访问服务！
2018-07-02 00:48:43 [INFO][org.springframework.context.annotation.AnnotationConfigApplicationContext][prepareRefresh][583]-> Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@468285a9: startup date [Mon Jul 02 00:48:43 GMT+08:00 2018]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1a760689
2018-07-02 00:48:43 [INFO][org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor][<init>][155]-> JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2018-07-02 00:48:44 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:48:44 [INFO][com.netflix.util.concurrent.ShutdownEnabledTimer][<init>][58]-> Shutdown hook installed for: NFLoadBalancer-PingTimer-eureka-client
2018-07-02 00:48:44 [INFO][com.netflix.loadbalancer.BaseLoadBalancer][initWithConfig][192]-> Client: eureka-client instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2018-07-02 00:48:44 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][enableAndInitLearnNewServersFeature][214]-> Using serverListUpdater PollingServerListUpdater
2018-07-02 00:48:44 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:48:44 [INFO][com.netflix.loadbalancer.DynamicServerListLoadBalancer][restOfInit][150]-> DynamicServerListLoadBalancer for client eureka-client initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=eureka-client,current list of Servers=[LAPTOP-MOM0E0E6:1002],Load balancer stats=Zone stats: {defaultzone=[Zone:defaultzone;	Instance count:1;	Active connections count: 0;	Circuit breaker tripped count: 0;	Active connections per server: 0.0;]
},Server stats: [[Server:LAPTOP-MOM0E0E6:1002;	Zone:defaultZone;	Total Requests:0;	Successive connection failure:0;	Total blackout seconds:0;	Last connection made:Thu Jan 01 08:00:00 GMT+08:00 1970;	First connection made: Thu Jan 01 08:00:00 GMT+08:00 1970;	Active Connections:0;	total failure count in last (1000) msecs:0;	average resp time:0.0;	90 percentile resp time:0.0;	95 percentile resp time:0.0;	min resp time:0.0;	max resp time:0.0;	stddev resp time:0.0]
]}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@3fb1a868
2018-07-02 00:48:45 [INFO][com.netflix.config.ChainedDynamicProperty][checkAndFlip][115]-> Flipping property: eureka-client.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2018-07-02 00:51:38 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
2018-07-02 00:56:38 [INFO][com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver][getClusterEndpoints][43]-> Resolving eureka endpoints via configuration
